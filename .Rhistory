if (name=="t"){
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter)[3],"=",round(result[[name]][3],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]][3],")")))
lines(density(y),lwd=2,col="red")
}
else{
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter)[1],"=",round(result[[name]][1],3),names(distr[[name]]$parameter)[2],"=",round(result[[name]][2],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]][1],",",result[[name]][2],")")))
lines(density(y),lwd=2,col="red")
}
}
}
return(ks_result)
}
ks_fitdist(x)
x <- rbeta(10000,5,10)
ks_fitdist(x)
nrow(iris)
ks_fitdist <- function(x){
if (!require(MASS)){
install.packages("MASS")}
library(MASS)
dist_name <- c("beta", "cauchy", "chi-squared", "exponential", "f", "gamma", "geometric", "lognormal", "logistic", "negative binomial", "normal", "Poisson", "t", "weibull")
distr <- list()
result <- list()
ks_result <- list()
n <- length(x)
distr[["beta"]] <- list(function_name="rbeta",parameter=list(shape1=4,shape2=1))
distr[["cauchy"]] <- list(function_name="rcauchy",parameter=list(location=200,scale=300))
distr[["chi-squared"]] <- list(function_name="rchisq",parameter=list(df=5,ncp=0))
distr[["exponential"]] <- list(function_name="rexp",parameter=list(rate=10))
distr[["f"]] <- list(function_name="rf",parameter=list(df1=60,df2=50))
distr[["gamma"]] <- list(function_name="rgamma",parameter=list(shape=5,rate=0.1))
distr[["geometric"]] <- list(function_name="rgeom",parameter=list(prob=0.5))
distr[["lognormal"]] <- list(function_name="rlnorm",parameter=list(meanlog=5,sdlog=1.5))
distr[["logistic"]] <- list(function_name="rlogis",parameter=list(location=5,scale=2))
distr[["negative binomial"]] <- list(function_name="rnbinom",parameter=list(size=300,prob=0.3))
distr[["normal"]] <- list(function_name="rnorm",parameter=list(mean=15,sd=2))
distr[["Poisson"]] <- list(function_name="rpois",parameter=list(lambda=400))
distr[["t"]] <- list(function_name="rt",parameter=list(m=3,s=2,df=5))
distr[["weibull"]] <- list(function_name="rweibull",parameter=list(shape=5,scale=9))
for (name in dist_name){
if (name %in% c("cauchy","exponential","geometric","lognormal","negative binomial","normal","Poisson","t")){
trynext <- try(fitdistr(x,name),silent=TRUE)
if ('try-error' %in% class(trynext)) result[[name]] <- NA
else result[[name]] <- fitdistr(x,name)[[1]]
}
else{
trynext <- try(fitdistr(x,name,start=distr[[name]][["parameter"]]),silent=TRUE)
if ('try-error' %in% class(trynext)) result[[name]] <- NA
else result[[name]] <- fitdistr(x,name,start=distr[[name]][["parameter"]])[[1]]
}
}
for (name in dist_name){
if (!identical(result[[name]],NA)){
if (name %in% c("exponential","Poisson","geometric")){
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
else{
if (name=="t"){
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]][3],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
else{
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]][1],",",result[[name]][2],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
}
}
}
ks_result <- as.data.frame(t(as.data.frame(ks_result)))
ks_result$dist_name <- row.names(ks_result)
ks_result <- ks_result[order(ks_result$D),c(2,1)]
row.names(ks_result) <- seq(1,nrow(ks_result))
#result[["ks_result"]] <- ks_result
for (name in ks_result$dist_name[nrow(ks_result):1]){
if (name %in% c("exponential","Poisson","geometric")){
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter),"=",round(result[[name]],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]],")")))
lines(density(y),lwd=2,col="red")
}
else{
if (name=="t"){
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter)[3],"=",round(result[[name]][3],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]][3],")")))
lines(density(y),lwd=2,col="red")
}
else{
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter)[1],"=",round(result[[name]][1],3),names(distr[[name]]$parameter)[2],"=",round(result[[name]][2],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]][1],",",result[[name]][2],")")))
lines(density(y),lwd=2,col="red")
}
}
}
return(ks_result)
}
a <- rnorm(1000,30,20)
ks_fitdist(a)
a <- rgamma(1000,20,1)
ks_fitdist(a)
# start <- function(){
#     t <- list(var=NA,type=NA,yval=NA,n=NA,sub_name=list(NA),prob=list(NA),value=NA,father_name=NA,leaf_name=list(NA),leafnode_value=list(NA),order=1,nn=1)
#     attr(t,'class') <- c('tree')
#     return(t)
# }
tree <- function(x,...) UseMethod("tree")
tree.default <- function(x){
t <- list(var=NA,type=NA,yval=NA,n=NA,sub_name=list(NA),prob=list(NA),value=NA,father_name=NA,leaf_name=list(NA),leafnode_value=list(NA),order=1,nn=1)
attr(t,'class') <- c('tree')
return(t)
}
tree.create <- function(x,name,type,n,sub_name,prob=NA,value=NA){
x$var <- name
x$type <- type
x$yval <- 1
x$n <- n
x$sub_name[[x$order]] <- sub_name
x$prob[[x$order]] <- prob
x$value <- value
x$order <- x$order+1
return(x)
}
tree.addnode <- function(x,name,type,n,sub_name=NA,prob=NA,value=NA,leaf_nodevalue=NA){
if (identical(type,NA)){
if (identical(x$father_name,NA)) x$father_name <- name
else x$father_name <- append(x$father_name,name)
x$leaf_name[[x$nn]] <- sub_name
x$leafnode_value[[x$nn]] <- leaf_nodevalue
x$nn <- x$nn+1
}
else{
x$var <- append(x$var,name)
x$type <- append(x$type,type)
for (i in 1:length(x$sub_name)) {if (name %in% x$sub_name[[i]]) k <- x$yval[i]+1}
x$yval <- append(x$yval,k)
x$n <- append(x$n,n)
x$sub_name[[x$order]] <- sub_name
x$prob[[x$order]] <- prob
x$value <- append(x$value,value)
if (!identical(leaf_nodevalue,NA)){
if (identical(x$father_name,NA)){
x$father_name <- name
x$leaf_name[[x$nn]] <- sub_name
x$leafnode_value[[x$nn]] <- leaf_nodevalue
x$nn <- x$nn+1
}
else{
x$father_name <- append(x$father_name,name)
x$leaf_name[[x$nn]] <- sub_name
x$leafnode_value[[x$nn]] <- leaf_nodevalue
x$nn <- x$nn+1
}
}
x$order <- x$order+1
}
return(x)
}
tree.eval <- function(x,opti){
for (i in length(x$value):1){
if (x$var[i] %in% x$father_name) {
if (x$type[i]=="chance") x$value[i] <- x$prob[[i]] %*% x$leafnode_value[[which(x$var[i]==x$father_name)]]
else if (opti=="max") x$value[i] <- max(x$leafnode_value[[which(x$var[i]==x$father_name)]])
else x$value[i] <- min(x$leafnode_value[[which(x$var[i]==x$father_name)]])
}
else {
t <- NULL
for (j in 1:length(x$sub_name[[i]])){
if (x$sub_name[[i]][j] %in% x$var) t[j] <- x$value[which(x$sub_name[[i]][j]==x$var)]
else t[j] <- x$leafnode_value[[which(x$sub_name[[i]][j]==x$father_name)]]
}
if (x$type[i]=="chance"){
x$value[i] <- x$prob[[i]] %*% t
}
else {
if (opti=='max') x$value[i] <- max(t)
else x$value[i] <- min(t)
}
}
}
return(x)
}
create <- function(x,name,type,n,sub_name,prob=NA,value=NA){
attr(x,"class")<-c("tree","create")
x <- tree(x,name,type,n,sub_name,prob,value)
return(x)
}
addnode <- function(x,name,type=NA,n=NA,sub_name=NA,prob=NA,value=NA,leaf_nodevalue=NA){
attr(x,"class")<-c("tree","addnode")
x <- tree(x,name,type,n,sub_name,prob,value,leaf_nodevalue)
return(x)
}
eval <- function(x,opti){
attr(x,"class")<-c("tree","eval")
x <- tree(x,opti)
return(x)
}
k <- tree()
k <- create(k,"a","choice",2,c("treasury","LLC"))
k <- addnode(k,"LLC","chance",2,c("fav1","unfav1"),c(0.3,0.7))
k <- addnode(k,"fav1","chance",2,c("yes","no"),prob=c(0.5,0.5),leaf_nodevalue=c(190000,-110000))
k <- addnode(k,"unfav1",leaf_nodevalue=190000)
k <- addnode(k,"treasury","chance",2,c("unfav2","fav2"),c(0.75,0.25))
k <- addnode(k,"fav2","chance",2,prob=c(0.75,0.25),leaf_nodevalue=c(-110000,190000))
k <- addnode(k,"unfav2",leaf_nodevalue=2000)
k <- eval(k,"max")
k
print(k)
tree.plot <- function(k){
if(!require(plotrix)){
install.packages("plotrix")}
library(plotrix)
if (!("tree" %in% class(k))) stop("Please use a tree class")
xlim <- (5+max(k$yval)/2)*(max(k$yval)+1)+40*(max(k$yval)+1)+5*(max(k$yval)+3)*max(k$yval)/2
depth <- max(k$yval)+1
len <- 0
for (item in k$leafnode_value) len <- len + length(item)
ylim <- 25*(len-1)+10
plot(x=c(0,xlim),c(0,ylim),type = "n",xlab = "",ylab = "",asp=1,xaxs="i",yaxs="i",axes=F)
for (i in 1:len) lines(c(xlim-35,xlim-35+2.5*sqrt(3)),c(20*i-10,20*i-7.5))
for (i in 1:len) lines(c(xlim-35,xlim-35+2.5*sqrt(3)),c(20*i-10,20*i-12.5))
for (i in 1:len) lines(c(xlim-35+2.5*sqrt(3),xlim-35+2.5*sqrt(3)),c(20*i-7.5,20*i-12.5))
coor <- list()
for (i in length(k$var):1) {
if (k$var[i] %in% k$father_name){
for (j in 1:length(k$leafnode_value[[which(k$var[i] == k$father_name)]])){
lines(c(xlim-35,xlim-75),c(20*len-10,20*len-10))
text(xlim-15,20*len-10,k$leafnode_value[[which(k$var[i] == k$father_name)]][j])
if (!identical(k$leaf_name[[which(k$var[i] == k$father_name)]],NA)){
text(xlim-55,20*len-5,k$leaf_name[[which(k$var[i] == k$father_name)]][j])
if (!identical(k$prob[[i]],NA)) text(xlim-55,20*len,k$prob[[i]][j])
}
else if (!identical(k$prob[[i]],NA)) text(xlim-55,20*len-5,k$prob[[i]][j])
coor$x[j] <- xlim-75
coor$y[j] <- 20*len-10
len <- len-1
}
for (j in 1:length(k$leafnode_value[[which(k$var[i] == k$father_name)]])){
lines(c(coor$x[j]-5*(depth-k$yval[i]+1),coor$x[j]),c(mean(coor$y),coor$y[j]))
coor$x[j] <- coor$x[j]-5*(depth-k$yval[i]+1)
}
if (k$type[i]=="chance"){
draw.circle(coor$x[1]-(depth-k$yval[i]+5)/2,mean(coor$y),(depth-k$yval[i]+5)/2)
text(coor$x[1]-(depth-k$yval[i]+5)/2,mean(coor$y)+5+max(k$yval)-k$yval[i],k$value[i])
coor[[k$var[i]]] <- c(coor$x[1]-(depth-k$yval[i]+5),mean(coor$y))
}
else {
rect(coor$x[1]-(depth-k$yval[i]+5),mean(coor$y)-(depth-k$yval[i]+5)/2,coor$x[1],mean(coor$y)+(depth-k$yval[i]+5)/2)
text(coor$x[1]-(depth-k$yval[i]+5)/2,mean(coor$y)+5+max(k$yval)-k$yval[i],k$value[i])
coor[[k$var[i]]] <- c(coor$x[1]-(depth-k$yval[i]+5),mean(coor$y))
}
}
else {
y <- 0
for (name in k$sub_name[[i]]){
if (name %in% k$var){
y <- y + coor[[name]][2]
}
else {
y <- y + 20*len-10
}
}
for (name in k$sub_name[[i]]){
if (name %in% k$var){
lines(c(coor[[name]][1]-40,coor[[name]][1]),c(coor[[name]][2],coor[[name]][2]))
text(coor[[name]][1]-20,coor[[name]][2]+5,name)
if (!identical(k$prob[[i]],NA)){
text(coor[[name]][1]-20,coor[[name]][2]+10,k$prob[[i]][which(name==k$sub_name[[i]])])
}
}
else {
lines(c( xlim-(3*(max(k$yval)-k$yval[i])^2+53*(max(k$yval)-k$yval[i])+75) ,xlim-35),c(20*len-10,20*len-10))
text(xlim-(3*(max(k$yval)-k$yval[i])^2+53*(max(k$yval)-k$yval[i])+75)+20,20*len-5,name)
text(xlim-15,20*len-10,k$leafnode_value[[which(name == k$father_name)]])
if (!identical(k$prob[[i]],NA)){
text(xlim-(3*(max(k$yval)-k$yval[i])^2+53*(max(k$yval)-k$yval[i])+75)+20,20*len,k$prob[[i]][which(name==k$sub_name[[i]])])
}
}
}
for (name in k$sub_name[[i]]){
if (name %in% k$var){
lines(c(coor[[name]][1]-40-5*(depth-k$yval[i]+1),coor[[name]][1]-40),c(y/length(k$sub_name[[i]]),coor[[name]][2]))
coor$x <- coor[[name]][1]-40-5*(depth-k$yval[i]+1)
coor$y <- y/length(k$sub_name[[i]])
}
else {
lines(c( xlim-(3*(max(k$yval)-k$yval[i])^2+58*(max(k$yval)-k$yval[i])+85) , xlim-(3*(max(k$yval)-k$yval[i])^2+53*(max(k$yval)-k$yval[i])+75) ),c(y/length(k$sub_name[[i]]),20*len-10))
len <- len - 1
}
}
if (k$type[i]=="chance"){
draw.circle(coor$x-(depth-k$yval[i]+5)/2,coor$y,(depth-k$yval[i]+5)/2)
text(coor$x-(depth-k$yval[i]+5)/2,coor$y+5+max(k$yval)-k$yval[i],k$value[i])
coor[[k$var[i]]] <- c(coor$x-(depth-k$yval[i]+5),coor$y)
}
else {
rect(coor$x-(depth-k$yval[i]+5),coor$y-(depth-k$yval[i]+5)/2,coor$x,coor$y+(depth-k$yval[i]+5)/2)
text(coor$x-(depth-k$yval[i]+5)/2,coor$y+5+max(k$yval)-k$yval[i],k$value[i])
coor[[k$var[i]]] <- c(coor$x-(depth-k$yval[i]+5),coor$y)
}
}
}
}
tree.plot(k)
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("kevin96hu/Active-Solver-Platform")
library(Active-Solver-Platform)
library(ASP)
# 1000 random normal distribution number
a <- psinormal(1000,20,30)
#
psimeanci(20,30,1000)
#
psicitrials(30,10)
#
psicitrials(30,1)
# find the most suitable distribution
b <- psigamma(1000,20,1)
# find the most suitable distribution
b <- psigamma(1000,20,1)
ks_fitdist(b)
# find the most suitable distribution
b <- psigamma(1000,20,1)
ks_fitdist(b)
ks_fitdist <- function(x){
if (!require(MASS)){
install.packages("MASS")}
library(MASS)
dist_name <- c("beta", "cauchy", "chi-squared", "exponential", "f", "gamma", "geometric", "lognormal", "logistic", "negative binomial", "normal", "Poisson", "t", "weibull")
distr <- list()
result <- list()
ks_result <- list()
n <- length(x)
distr[["beta"]] <- list(function_name="rbeta",parameter=list(shape1=4,shape2=1))
distr[["cauchy"]] <- list(function_name="rcauchy",parameter=list(location=200,scale=300))
distr[["chi-squared"]] <- list(function_name="rchisq",parameter=list(df=5,ncp=0))
distr[["exponential"]] <- list(function_name="rexp",parameter=list(rate=10))
distr[["f"]] <- list(function_name="rf",parameter=list(df1=60,df2=50))
distr[["gamma"]] <- list(function_name="rgamma",parameter=list(shape=5,rate=0.1))
distr[["geometric"]] <- list(function_name="rgeom",parameter=list(prob=0.5))
distr[["lognormal"]] <- list(function_name="rlnorm",parameter=list(meanlog=5,sdlog=1.5))
distr[["logistic"]] <- list(function_name="rlogis",parameter=list(location=5,scale=2))
distr[["negative binomial"]] <- list(function_name="rnbinom",parameter=list(size=300,prob=0.3))
distr[["normal"]] <- list(function_name="rnorm",parameter=list(mean=15,sd=2))
distr[["Poisson"]] <- list(function_name="rpois",parameter=list(lambda=400))
distr[["t"]] <- list(function_name="rt",parameter=list(m=3,s=2,df=5))
distr[["weibull"]] <- list(function_name="rweibull",parameter=list(shape=5,scale=9))
for (name in dist_name){
if (name %in% c("cauchy","exponential","geometric","lognormal","negative binomial","normal","Poisson","t")){
trynext <- try(fitdistr(x,name),silent=TRUE)
if ('try-error' %in% class(trynext)) result[[name]] <- NA
else result[[name]] <- fitdistr(x,name)[[1]]
}
else{
trynext <- try(fitdistr(x,name,start=distr[[name]][["parameter"]]),silent=TRUE)
if ('try-error' %in% class(trynext)) result[[name]] <- NA
else result[[name]] <- fitdistr(x,name,start=distr[[name]][["parameter"]])[[1]]
}
}
for (name in dist_name){
if (!identical(result[[name]],NA)){
if (name %in% c("exponential","Poisson","geometric")){
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
else{
if (name=="t"){
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]][3],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
else{
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]][1],",",result[[name]][2],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
}
}
}
ks_result <- as.data.frame(t(as.data.frame(ks_result)))
ks_result$dist_name <- row.names(ks_result)
ks_result <- ks_result[order(ks_result$D),c(2,1)]
row.names(ks_result) <- seq(1,nrow(ks_result))
#result[["ks_result"]] <- ks_result
for (name in ks_result$dist_name[nrow(ks_result):1]){
if (name %in% c("exponential","Poisson","geometric")){
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter),"=",round(result[[name]],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]],")")))
lines(density(y),lwd=2,col="red")
}
else{
if (name=="t"){
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter)[3],"=",round(result[[name]][3],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]][3],")")))
lines(density(y),lwd=2,col="red")
}
else{
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter)[1],"=",round(result[[name]][1],3),names(distr[[name]]$parameter)[2],"=",round(result[[name]][2],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]][1],",",result[[name]][2],")")))
lines(density(y),lwd=2,col="red")
}
}
}
return(ks_result)
}
ks_fitdist(b)
devtools::install_github("kevin96hu/Active-Solver-Platform")
library(ASP)
# 1000 random normal distribution number
a <- psinormal(1000,20,30)
# confidence interval of mean
psimeanci(20,30,1000)
# number of trials needed
psicitrials(30,1)
# find the most suitable distribution
b <- psigamma(1000,20,1)
ks_fitdist(b)
ks_fitdist <- function(x){
if (!require(MASS)){
install.packages("MASS")}
library(MASS)
dist_name <- c("beta", "cauchy", "chi-squared", "exponential", "f", "gamma", "geometric", "lognormal", "logistic", "negative binomial", "normal", "Poisson", "t", "weibull")
distr <- list()
result <- list()
ks_result <- list()
n <- length(x)
distr[["beta"]] <- list(function_name="rbeta",parameter=list(shape1=4,shape2=1))
distr[["cauchy"]] <- list(function_name="rcauchy",parameter=list(location=200,scale=300))
distr[["chi-squared"]] <- list(function_name="rchisq",parameter=list(df=5,ncp=0))
distr[["exponential"]] <- list(function_name="rexp",parameter=list(rate=10))
distr[["f"]] <- list(function_name="rf",parameter=list(df1=60,df2=50))
distr[["gamma"]] <- list(function_name="rgamma",parameter=list(shape=5,rate=0.1))
distr[["geometric"]] <- list(function_name="rgeom",parameter=list(prob=0.5))
distr[["lognormal"]] <- list(function_name="rlnorm",parameter=list(meanlog=5,sdlog=1.5))
distr[["logistic"]] <- list(function_name="rlogis",parameter=list(location=5,scale=2))
distr[["negative binomial"]] <- list(function_name="rnbinom",parameter=list(size=300,prob=0.3))
distr[["normal"]] <- list(function_name="rnorm",parameter=list(mean=15,sd=2))
distr[["Poisson"]] <- list(function_name="rpois",parameter=list(lambda=400))
distr[["t"]] <- list(function_name="rt",parameter=list(m=3,s=2,df=5))
distr[["weibull"]] <- list(function_name="rweibull",parameter=list(shape=5,scale=9))
for (name in dist_name){
if (name %in% c("cauchy","exponential","geometric","lognormal","negative binomial","normal","Poisson","t")){
trynext <- try(fitdistr(x,name),silent=TRUE)
if ('try-error' %in% class(trynext)) result[[name]] <- NA
else result[[name]] <- fitdistr(x,name)[[1]]
}
else{
trynext <- try(fitdistr(x,name,start=distr[[name]][["parameter"]]),silent=TRUE)
if ('try-error' %in% class(trynext)) result[[name]] <- NA
else result[[name]] <- fitdistr(x,name,start=distr[[name]][["parameter"]])[[1]]
}
}
for (name in dist_name){
if (!identical(result[[name]],NA)){
if (name %in% c("exponential","Poisson","geometric")){
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
else{
if (name=="t"){
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]][3],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
else{
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(n,",result[[name]][1],",",result[[name]][2],")")))
ks_result[[name]] <- ks.test(x,y)[["statistic"]]
}
}
}
}
ks_result <- as.data.frame(t(as.data.frame(ks_result)))
ks_result$dist_name <- row.names(ks_result)
ks_result <- ks_result[order(ks_result$D),c(2,1)]
row.names(ks_result) <- seq(1,nrow(ks_result))
#result[["ks_result"]] <- ks_result
for (name in ks_result$dist_name[nrow(ks_result):1]){
if (name %in% c("exponential","Poisson","geometric")){
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter),"=",round(result[[name]],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]],")")))
lines(density(y),lwd=2,col="red")
}
else{
if (name=="t"){
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter)[3],"=",round(result[[name]][3],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]][3],")")))
lines(density(y),lwd=2,col="red")
}
else{
hist(x,freq=F,main=paste("Histogram of",name,"distribution \n parameter:",names(distr[[name]]$parameter)[1],"=",round(result[[name]][1],3),names(distr[[name]]$parameter)[2],"=",round(result[[name]][2],3)),col="gray")
lines(density(x),lwd=2,col="blue")
y <- eval(parse(text=paste0(distr[[name]]$function_name,"(",n,",",result[[name]][1],",",result[[name]][2],")")))
lines(density(y),lwd=2,col="red")
}
}
}
return(ks_result)
}
ks_fitdist(b)
c(.3,.4)
t <- c(.3,.4)
sum(t)
k<-list(a=c("b","c"),d=c("e","f"))
for (i in k) print(i)
?hist
